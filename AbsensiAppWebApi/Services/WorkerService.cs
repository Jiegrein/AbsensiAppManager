using AbsensiAppWebApi.DB.Entities;
using AbsensiAppWebApi.Models;
using DocumentFormat.OpenXml.Spreadsheet;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;

namespace AbsensiAppWebApi.Services
{
    public class WorkerService
    {
        public AbsensiAppDbContext Db { get; set; }
        public IConfiguration Configuration { get; set; }
        public WorkerService(AbsensiAppDbContext dbcontext,
            IConfiguration configuration)
        {
            this.Db = dbcontext;
            Configuration = configuration;
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public async Task<string> LoginWorker(string model)
        {
            var guid = new Guid(model);
            var item = await Db.Workers.Where(Q => Q.Id == guid).FirstOrDefaultAsync();
            if (item != null)
            {
                var issuer = Configuration["Jwt:Issuer"];
                var audience = Configuration["Jwt:Audience"];
                var securityKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration["Jwt:Key"]));
                var credentials = new SigningCredentials(securityKey, SecurityAlgorithms.HmacSha256);

                // Now its ime to define the jwt token which will be responsible of creating our tokens
                var jwtTokenHandler = new JwtSecurityTokenHandler();

                // We get our secret from the appsettings
                var key = Encoding.ASCII.GetBytes(Configuration["Jwt:Key"]);

                // we define our token descriptor
                // We need to utilise claims which are properties in our token which gives information about the token
                // which belong to the specific user who it belongs to
                // so it could contain their id, name, email the good part is that these information
                // are generated by our server and identity framework which is valid and trusted
                var tokenDescriptor = new SecurityTokenDescriptor
                {
                    Subject = new ClaimsIdentity(new[]
                    {
                        new Claim("Id", "1"),
                        new Claim(JwtRegisteredClaimNames.Name, item.Fullname),
                        // the JTI is used for our refresh token which we will be convering in the next video
                        new Claim(JwtRegisteredClaimNames.Jti, Guid.NewGuid().ToString())
                    }),
                    Audience = audience,
                    Issuer = issuer,
                    // here we are adding the encryption alogorithim information which will be used to decrypt our token
                    SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha512Signature)
                };
                var token = jwtTokenHandler.CreateToken(tokenDescriptor);
                var jwtToken = jwtTokenHandler.WriteToken(token);
                return jwtToken;
            }
            else
            {
                return null;
            }
        }

        /// <summary>
        /// Create worker for first time login
        /// </summary>
        /// <param name="workerId"></param>
        /// <returns></returns>
        public async Task<WorkerModelDTO> CreateWorker(WorkerModel model)
        {
            Worker worker;
            var checkedPhone = model.Phone;
            if (checkedPhone[..3] == "620")
                checkedPhone = "0" + checkedPhone[3..];
            else if (checkedPhone[..2] == "62")
                checkedPhone = "0" + checkedPhone[2..];
            else if (checkedPhone[..1] != "0")
                checkedPhone = "0" + checkedPhone;

            var phoneCheck = await GetWorkerByPhone(checkedPhone);
            if (phoneCheck != null)
                worker = phoneCheck;
            else
            {
                var id = new Guid(model.Id);
                var nowUtc = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Utc);

                worker = new Worker()
                {
                    Id = id,
                    Fullname = model.Fullname,
                    Name = model.Name,
                    WorkStatus = false,
                    BreakStatus = false,
                    CreatedAt = nowUtc,
                    Phone = checkedPhone,
                };

                Db.Workers.Add(worker);

                await Db.SaveChangesAsync();
            }
            var result = new WorkerModelDTO
            {
                Id = worker.Id,
                Fullname = worker.Fullname,
                Name = worker.Name,
                WorkStatus = false,
                BreakStatus = false,
                CreatedAt = worker.CreatedAt,
                Phone = worker.Phone,
                Token = await LoginWorker(worker.Id.ToString())
            };
            return result;
        }

        /// <summary>
        /// Get worker_id for loading app
        /// </summary>
        /// <param name="workerId"></param>
        /// <returns></returns>
        public async Task<Worker> GetWorkerDetail(string workerId)
        {
            try
            {
                var id = new Guid(workerId);

                var workerDetail = await Db.Workers
                    .Where(Q => Q.Id == id)
                    .AsNoTracking()
                    .FirstOrDefaultAsync();

                return workerDetail;
            }
            catch (Exception)
            {
                return new Worker();
            }
        }

        /// <summary>
        /// Get worker_id for loading app
        /// </summary>
        /// <param name="phone"></param>
        /// <returns></returns>
        public async Task<Worker> GetWorkerByPhone(string phone)
        {
            try
            {
                var workerDetail = await Db.Workers
                    .Where(Q => Q.Phone == phone)
                    .AsNoTracking()
                    .FirstOrDefaultAsync();

                return workerDetail;
            }
            catch (Exception)
            {
                return new Worker();
            }
        }

        /// <summary>
        /// Create worker log when they scan using start working
        /// </summary>
        /// <param name="workerId"></param>
        /// <returns></returns>
        public async Task<(bool, NewLogModel)> CreateWorkerLog(WorkerLogModel model)
        {
            try
            {
                var nowUtc = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Utc);

                var startDate = DateTime.SpecifyKind(new DateTime(nowUtc.Year, nowUtc.Month, nowUtc.Day, 0, 0, 0), DateTimeKind.Utc);

                var endDate = DateTime.SpecifyKind(new DateTime(nowUtc.Year, nowUtc.Month, nowUtc.Day, 23, 59, 59), DateTimeKind.Utc);

                var workerId = new Guid(model.WorkerId);

                var sameDayLogIdExist = await Db.WorkerLogs
                    .Where(Q => Q.CreatedAt >= startDate && Q.CreatedAt <= endDate && Q.WorkerId == workerId)
                    .ToListAsync();

                var scanId = await Db.ScanEnums
                    .Where(Q => Q.Id == model.ScanEnumId)
                    .Select(Q => Q.Id)
                    .FirstOrDefaultAsync();

                var isProjectId = await Db.Projects
                    .Where(Q => model.ProjectId.Contains(Q.ProjectId.ToString()))
                    .AnyAsync();

                if (sameDayLogIdExist.Count > 0)
                {
                    if (sameDayLogIdExist.Select(Q => Q.ProjectId.ToString()).Contains(model.ProjectId))
                    {
                        var sameDayLog = sameDayLogIdExist.Where(Q => Q.ProjectId.ToString() == model.ProjectId).OrderBy(Q => Q.CreatedAt).FirstOrDefault();
                        return (false, new NewLogModel()
                        {
                            LogId = "",
                            ProjectId = "",
                            Message = "Hari ini sudah scan kerja pada jam : " + sameDayLog.CreatedAt.Hour + ":" + sameDayLog.CreatedAt.Minute + ":" + sameDayLog.CreatedAt.Second,
                        });
                    }
                }

                if (scanId == (int)DB.Enums.ScanEnums.StartWork && isProjectId)
                {
                    var name = await GetWorkerName(model.WorkerId);

                    var logId = nowUtc.ToString("ddddyyyyMMddHHmmss");

                    var workerLog = new WorkerLog()
                    {
                        LogId = logId,
                        WorkerId = workerId,
                        StartWork = nowUtc,
                        ProjectId = new Guid(model.ProjectId),
                        CreatedAt = nowUtc,
                        CreatedBy = name,
                    };

                    var worker = await Db.Workers
                        .Where(Q => Q.Id == workerId)
                        .Select(Q => Q)
                        .FirstOrDefaultAsync();

                    worker.WorkStatus = true;

                    Db.Add(workerLog);

                    await Db.SaveChangesAsync();

                    return (true, new NewLogModel()
                    {
                        LogId = logId.ToString(),
                        ProjectId = model.ProjectId,
                        Message = ""
                    });
                }

                return (false, new NewLogModel()
                {
                    LogId = "",
                    ProjectId = "",
                    Message = "Barcode yang di scan tidak terdaftar",
                });
            }
            catch (Exception e)
            {
                return (false, new NewLogModel()
                {
                    LogId = "",
                    ProjectId = "",
                    Message = e.Message,
                });
            }
        }

        /// <summary>
        /// Update worker log when they scan using start / stop break and stop working
        /// </summary>
        /// <param name="workerId"></param>
        /// <returns></returns>
        public async Task<(bool, string)> UpdateWorkerLog(string logId, WorkerLogModel model)
        {
            try
            {
                var name = await GetWorkerName(model.WorkerId);

                var workerId = Guid.Parse(model.WorkerId);

                var workerLog = await Db.WorkerLogs
                    .Where(Q => Q.LogId == logId).FirstOrDefaultAsync();

                var scanId = await Db.ScanEnums
                    .Where(Q => Q.Id == model.ScanEnumId)
                    .Select(Q => Q.Id)
                    .FirstOrDefaultAsync();

                if (workerLog != null)
                {
                    var nowUtc = DateTime.SpecifyKind(DateTime.UtcNow, DateTimeKind.Utc);

                    var worker = await Db.Workers
                        .Where(Q => Q.Id == workerId)
                        .Select(Q => Q)
                        .FirstOrDefaultAsync();

                    if (scanId == (int)DB.Enums.ScanEnums.StartBreak)
                    {
                        workerLog.StartBreak = nowUtc;

                        worker.WorkStatus = true;
                        worker.BreakStatus = true;
                    }
                    else if (scanId == (int)DB.Enums.ScanEnums.EndBreak)
                    {
                        workerLog.EndBreak = nowUtc;

                        worker.WorkStatus = true;
                        worker.BreakStatus = false;
                    }
                    else if (scanId == (int)DB.Enums.ScanEnums.EndWork)
                    {
                        workerLog.EndWork = nowUtc;

                        worker.WorkStatus = false;
                        worker.BreakStatus = false;
                    }
                    else return (false, "");

                    workerLog.UpdatedAt = nowUtc;
                    workerLog.UpdatedBy = name;
                    Db.Update(workerLog);
                    await Db.SaveChangesAsync();

                    return (true, "");
                }

                else return (false, "");
            }
            catch (Exception e)
            {
                return (false, e.Message);
            }
        }

        /// <summary>
        /// Get worker name
        /// </summary>
        /// <param name="workerId"></param>
        /// <returns></returns>
        public async Task<string> GetWorkerName(string workerId)
        {
            var id = new Guid(workerId);
            return await Db.Workers.Where(Q => Q.Id == id).Select(Q => Q.Fullname).FirstOrDefaultAsync();
        }
    }
}
